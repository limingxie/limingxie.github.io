<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Work_sharings on li_mingxie - Blog</title>
    <link>https://limingxie.github.io/work_sharing/</link>
    <description>Recent content in Work_sharings on li_mingxie - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>limingxie - blog</copyright>
    <lastBuildDate>Mon, 24 Sep 2018 07:28:49 +0800</lastBuildDate>
    
	<atom:link href="https://limingxie.github.io/work_sharing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>技术Leader需要哪些能力？</title>
      <link>https://limingxie.github.io/work_sharing/share_001/</link>
      <pubDate>Mon, 24 Sep 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/share_001/</guid>
      <description>身为一个高龄开发者(30岁以上应该都属于高领开发者吧？ 这世道&amp;hellip;ㅠㅠ)，
我也一样(35岁&amp;hellip;ㅠㅠ)，对以后的职业发展有很多苦恼。
我是幸运的，因为我们公司有一位高龄的技术牛人。
让我看到了一丝希望。原来做技术也可以做到这种程度。
(写了好几本书，开源代码社区的CodeReviewer，我问的问题没有一个回答不了的。)
前些天有幸和这位牛人做了一些工作上的交流，
如何做好技术Leader，让我感触特别的深刻。
以下是他给我的建议以及我自己的感触，想和大家一起分享。
快速的转换思维的能力 我们写代码的时候不喜欢被打扰，谁也不喜欢自己聚精会神的工作的时候有人过来打扰自己。
但是大部分的情况下，我们不是单打独斗。
身为技术Leader，我们就有义务去协助组员。
当我们有一定的能力以后，甚至需要协助几个小组或全公司的技术。
在这种情况下，如果拒绝被打扰，等于是不想做这个技术Leader。
我们需要学会`快速的进入角色`，进入时间越短越好。 一般情况下，别人做一些复杂的开发的时候需要5~10分钟去`从新进入状态`的话， 我们要在1分钟内，甚至30秒内要进入状态。 哪怕是自己的开发，或是其他人问题的解答。`必须快速的进入状态去解决问题。` A过来问，解答后我们用5分钟的时间调整状态做自己的事情，刚准备好B过来了。 等把B的问题看完后，再用5分钟的时间调节自己的状态，过了不到10分钟，C又过来问.... 等着晚上加班做自己的事情吧...^^||  所以快速的转换思维进入状态能力很重要，需要有意的去提高这个能力才行。
细分工作的能力 身为技术Leader现在准备好随时被打扰了吗？
随时被打扰，我们的工作就不做了吗？
所以我们还需要细分工作，分的颗粒度越小越好。
我一般喜欢这种编程方式。 觉得这是一个比较复杂的内容，&#39;就直接写个空的方法。先返回null。&#39; 走下一个逻辑。`先把这个流程或是这个逻辑走完。` 之后再写刚才觉得复杂的那个方法。 这么写话，每个函数所实现的内容不多，中间被打断也是很容易从新进入状态。 也可以先让问问题的人等几分钟，先把这个逻辑写完后，再一起讨论他的问题。  所以提高细分工作的能力会让不断的打扰中，保持工作的节奏和状态。
不断的摸索提高自己的开发效率的方法 不断的被打扰，不断的开会。
让技术Leader们很难有充分的时间去编程。
那技术Leader就不需要写代码吗？
或是写很少一部分的代码就可以了吗？
其实不是，为了保持自己对技术感觉，我们还需要不断的写代码。
那怎么办？
这会要求我们别人写2个小时的内容，我么是要在1小时甚至半小时内写完。
需要不断的去找合适自己，提高自己效率的方法。 举例子，合理的运用快捷键。command + ~ , command + -&amp;gt;... git的gcb, ga, gcmsg, ggpull, ggpush, glum, glog ... vsCode的多行修改， opton + 方向键，control + -&amp;gt; ... 合理的分配屏幕的结构，左边数据库，中间代码窗，下面zsh窗，右边postman等等... 我们需要不断思考，寻找对自己合适的开发方式。 还有最重要的一项&#39;提高整体的技术能力以及思维能力。&#39;  不断的摸索提高自己的开发效率的方法，学会短时间内出满意的产出物。</description>
    </item>
    
  </channel>
</rss>