<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on li_mingxie - Blog</title>
    <link>https://limingxie.github.io/basic/</link>
    <description>Recent content in Basics on li_mingxie - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>limingxie - blog</copyright>
    <lastBuildDate>Mon, 12 Oct 2020 23:28:49 +0800</lastBuildDate>
    
	<atom:link href="https://limingxie.github.io/basic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>栈(stack), 堆(heap), 队列(queue) 是什么？</title>
      <link>https://limingxie.github.io/basic/stack/</link>
      <pubDate>Mon, 12 Oct 2020 23:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/stack/</guid>
      <description>我们平时经常遇到栈(stack), 队列(queue), 堆(heap)这些词语。
像我这样不是计算机专业毕业的程序原来说，为了更好的理解这些内容，
我自己简单的整理了一下栈(stack), 堆(heap)和队列(queue)的概念。
希望有些帮助。
 栈(stack), 队列(queue), 堆(heap)都是一个数据结构。
 一. 栈(stack) 是计算机科学里最重要且最基础的数据结构之一。 (直接看下图更容易理解)
1.常用的几个名词 栈顶(top), 栈底(bottom), 进栈(push), 出栈(pop)。 栈中的每个元素称为一个frame。  2.一个很重要的特点 先进后出: FILO（First In Last Out）的原则存储数据。  它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶,
需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。
图片备用地址
3.最经典的计算机应用是函数调用 每个进程都会有一个栈，每个frame中记录了调用函数的参数，自动变量和返回地址。
当该函数调用一个新的函数时，栈中会 push一个frame。
当函数执行完毕返回时，该frame会pop，从而进入调用该函数的原函数，继续执行。
4.比较常用的应用场景 1) 子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中， 直到子程序执行完后再将地址取出，以回到原来的程序中。 2) 递归的调用：可以用来在函数调用的时候存储断点， 储存下一个指令的地址外，也将参数、区域变量等数据存入栈中。 3) 表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。 4) 二叉树的遍历。 5) 图形的深度优先(depth一first)搜索法。  二. 堆(heap) 堆(Heap)是计算机科学中的一种特别的完全二叉树。(直接看下图更容易理解)
维基百科是这么解释的:
若是满足以下特性，即可称为堆： “给定堆中任意节点P和C，若P是C的父节点，那么P的值会小于等于（或大于等于）C的值”。 若父节点的值恒小于等于子节点的值，此堆称为最小堆(min heap); 反之，若父节点的值恒大于等于子节点的值，此堆称为最大堆(max heap)。 在堆中最顶端的那一个节点，称作根节点（root node），根节点本身没有父节点(parent node)  堆总是满足下列性质：
 堆中某个节点的值总是不大于或不小于其父节点的值</description>
    </item>
    
  </channel>
</rss>