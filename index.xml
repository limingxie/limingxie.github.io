<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Website of li_mingxie</title>
    <link>https://limingxie.github.io/</link>
    <description>Recent content on Website of li_mingxie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 Apr 2022 22:28:49 +0800</lastBuildDate><atom:link href="https://limingxie.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【网络协议笔记】浅谈OSI网络七层协议</title>
      <link>https://limingxie.github.io/network/osi/</link>
      <pubDate>Mon, 18 Apr 2022 22:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/osi/</guid>
      <description>开放式系统互联模型（英语：Open System Interconnection Model，缩写：OSI；简称为OSI模型）是一种概念模型。
从分布式应用程序数据的最高层表示到跨通信介质传输数据的物理实现。
每个中间层为其上一层提供功能，其自身功能则由其下一层提供。功能的类别通过标准的通信协议在软件中实现。
OSI模型分为七个层次。它们由低到高分别是物理层(PH)、数据链路层(DL)、网络层(N)、传输层(T)、会话层(S)、表示层(P)、应用层(A)。
7层模型是偏理论的模型。实际落地的时，大部分都准守4层的TCP/IP协议族。 因物理层和数据链路层比较重要，所以研究和学习时，有可能分5层结构。 如下图: 图片备用地址</description>
    </item>
    
    <item>
      <title>浅谈数字证书(Digital Certificate)的发放和验证原理</title>
      <link>https://limingxie.github.io/network/digital_certificate/</link>
      <pubDate>Mon, 11 Apr 2022 22:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/digital_certificate/</guid>
      <description>1.数字证书是什么？ 数字证书(digital certificate)是互联网通讯中标志通讯各方身份信息的一系列数据，提供了验证身份的方式。
它是由一个由权威机构（Certificate Authority）中心发行的，人们可以在网上用它来识别对方的身份。
最简单的数字证书包含一个公开密钥、名称以及证书授权中心的数字签名。
2.常见的3种加密方式 为了了解数字证书的原理，首先需要了解已下3种加密方式。
2.1 hash算法加密 它是一种不可逆的加密方式，对一组数据使用哈希算法加密，加密后不能解密。</description>
    </item>
    
    <item>
      <title>【mysql】索引简介</title>
      <link>https://limingxie.github.io/database/mysql_index/</link>
      <pubDate>Tue, 05 Apr 2022 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/database/mysql_index/</guid>
      <description>&lt;p&gt;最近了查看了mysql索引，很多资料&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>5G网架构简介</title>
      <link>https://limingxie.github.io/network/5gc/</link>
      <pubDate>Mon, 04 Apr 2022 16:38:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/5gc/</guid>
      <description>最近有机会查看了有关5G网的内容。对于移动通讯完全不懂的小白来说一切都很陌生和茫然。
几天的摸索，整理了“皮毛”内容，希望像我这样的小白有帮助&amp;hellip;^^
1. 网元(Network Element) 我们先了解一下，5G网络中网元(NE)是什么？
网元由一个或多个机盘或机框组成， 能够独立完成一定的传输功能。
简单的说，5G网络是由多个网元(Network Element)组成。每个网元有各自的功能。</description>
    </item>
    
    <item>
      <title>【go笔记】goroutine调度器的GMP模型简介</title>
      <link>https://limingxie.github.io/go/go_routine/</link>
      <pubDate>Wed, 23 Mar 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/go_routine/</guid>
      <description>说起go语言，离不开goroutine。
之前使用go语言开发的时候，也没多少机会用到goroutine。
趁这些天了解一下GMP模型G(goroutine) M(thread) P(Processor)。
1.GMP模型 G -&amp;gt; goroutine Go中，协程被称为goroutine，一个goroutine只占几KB。</description>
    </item>
    
    <item>
      <title>【设计模式】常见的设计模式简介</title>
      <link>https://limingxie.github.io/struct/design_pattern/</link>
      <pubDate>Wed, 23 Mar 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/struct/design_pattern/</guid>
      <description>我们常见设计模式一共有23种模式。其中我们可以分3个比较大的类型。
创建型模式，结构型模式，行为型模式。
1、创建型模式：用来描述 “如何创建对象”，它的主要特点是 “将对象的创建和使用分离”。包括单例、原型、工厂方法、抽象工厂和建造者 5 种模式。
2、结构型模式：用来描述如何将类或对象按照某种布局组成更大的结构。包括代理、适配器、桥接、装饰、外观、享元和组合 7 种模式。</description>
    </item>
    
    <item>
      <title>【go笔记】map结构的简介</title>
      <link>https://limingxie.github.io/go/go_map/</link>
      <pubDate>Sat, 19 Mar 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/go_map/</guid>
      <description>go的hashtable是用map实现。
今天简单的整理了map的结构。
1.map的结构 hmap 在源码中, map的结构体是hmap, 它是hashmap的“缩写”。
先看看看源码是怎么解释的。
// A header for a Go map.</description>
    </item>
    
    <item>
      <title>【ES笔记】Elasticsearch结构和常用API简介</title>
      <link>https://limingxie.github.io/database/elasticsearch/</link>
      <pubDate>Thu, 17 Mar 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/database/elasticsearch/</guid>
      <description>简单的做一下Elasticsearch的结构和常用语法的记录。
为以后方便查看&amp;hellip;^^
1.Elasticsearch基本概念 Cluster 集群 群集是一个或多个节点（服务器）的集合， 这些节点共同保存整个数据，并在所有节点上提供联合索引和搜索功能。
一个集群由一个唯一集群ID确定，并指定一个集群名（默认为“elasticsearch”）。
Node节点 节点是单个服务器实例，它是群集的一部分，可以存储数据，并参与群集的索引和搜索功能。</description>
    </item>
    
    <item>
      <title>【go笔记】切片(slice)结构的简介</title>
      <link>https://limingxie.github.io/go/go_slice_code/</link>
      <pubDate>Sat, 12 Mar 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/go_slice_code/</guid>
      <description>我们java里有个ArrayList， 那go有切片(slice)。
看起来有点像，但是了解切片(slice)结构后，会发现这其实是个两个不同的结构。
下面简单的整理了切片(slice)的结构。
1.切片(slice) 切片(slice)是数组的一个引用，因此切片是引用类型。但自身是结构体，值拷贝传递。
看看下图就应该能明白，为什么说是引用类型，可又说自身又是结构体。
图片备用地址
Slice 的数据结构可以如下定义:</description>
    </item>
    
    <item>
      <title>【go笔记】指针, uintptr, unsafe.Pointer</title>
      <link>https://limingxie.github.io/go/go_point/</link>
      <pubDate>Thu, 10 Mar 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/go_point/</guid>
      <description>今天简单整理一下以下三种指针: 普通指针(*T), uintptr, unsafe.Pointer
1. 普通指针(*T) 普通指针类型，用于传递对象地址，不能进行指针运算。 可以用 &amp;amp;(取地址) *(根据地址取值)。</description>
    </item>
    
    <item>
      <title>72小时断食后记</title>
      <link>https://limingxie.github.io/limingxie/-intermittent_fasting_72h/</link>
      <pubDate>Sun, 06 Mar 2022 22:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/-intermittent_fasting_72h/</guid>
      <description>很长时间在网上看过3天【72小时的断食】多么多么的好，
说什么改善人体免疫系统，消化系统，排除毒素等等&amp;hellip;
我以前减肥的时候也尝试过12,16,24小时的断食，也亲身体验过这些断食的好处。
这是我简单的整理了减肥的过程。程序员减肥记
这次挑战72小时断食。(还有7天断食,这就不挑战了&amp;hellip;^^;; 这个感觉需要专业知识。)
1.前期准备 我看了好几个版本的72小时断食的介绍，无非有2种比较流行的方式。
  早中晚都只喝蜂蜜水，适当的补充盐分。主要是为了清肠和排毒。(必要是需要做灌肠) 只喝水，适当的补充盐分，主要是为了最大范围的适用【自体吞噬泡(Autophagy)】的效果。   对间接性断食有一些了解的人都知道，人体空腹16个小时的时候会分泌成长荷尔蒙，以及出现自体吞噬泡(Autophagy)的现象。</description>
    </item>
    
    <item>
      <title>【算法笔记】排序二叉树(Binary Search Tree)的简单代码实现</title>
      <link>https://limingxie.github.io/algorithm/tree_code_bst/</link>
      <pubDate>Thu, 17 Feb 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/tree_code_bst/</guid>
      <description>简单的写了一下排序二叉树(Binary Search Treee)的查询，删除。
加上树的遍历前序遍历，中序遍历，后序遍历。
1.排序二叉树(Binary Search Tree)的结构 先声明一个BSTTree和TreeNode两个struct。
type BSTTree struct { Root *TreeNode } type TreeNode struct { Value int Left *TreeNode Right *TreeNode } 2.</description>
    </item>
    
    <item>
      <title>【算法笔记】散列表(哈希表 Hash table)的简单实践</title>
      <link>https://limingxie.github.io/algorithm/hash_table/</link>
      <pubDate>Wed, 16 Feb 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/hash_table/</guid>
      <description>今天用go语言简单的写了一下散列表(哈希表 Hash table)的方法。
为了以后方便查看，当做笔记整理了一下~~
1.散列表(Hash table) 我们先看看维基百科里是怎么解释的。
 根据键（Key）而直接访问在内存储存位置的数据结构。也就是说，它通过计算出一个键值的函数，将所需查询的数据映射到表中一个位置来让人访问，这加快了查找速度。
这个映射函数称做散列函数，存放记录的数组称做散列表。</description>
    </item>
    
    <item>
      <title>【算法笔记】PriorityQueue的简单实践</title>
      <link>https://limingxie.github.io/algorithm/priority_queue_code/</link>
      <pubDate>Tue, 15 Feb 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/priority_queue_code/</guid>
      <description>今天用go语言简单的写了一下PriorityQueue的方法。
为了以后方便查看，当做笔记整理了一下~~
1.优先队列(PriorityQueue) 维基百科里是这么解释的。
 优先队列是计算机科学中的一类抽象数据类型。优先队列中的每个元素都有各自的优先级，优先级最高的元素最先得到服务；
优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列往往用堆来实现。
 下面用go语言简单的实现了PriorityQueue。
struct type PriorityQueue struct { Head *Node } type Node struct { Value string Priority int Next *Node } Push func (p *PriorityQueue) Push(value string, priority int) { if p.</description>
    </item>
    
    <item>
      <title>【算法笔记】queue的简单实践</title>
      <link>https://limingxie.github.io/algorithm/queue_code/</link>
      <pubDate>Mon, 14 Feb 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/queue_code/</guid>
      <description>今天用go语言简单的写了一下queue的方法。
为了以后方便查看，当做笔记整理了一下~~
1.队列(QUEUE) 维基百科里是这么解释的。
 计算机科学中的一种抽象资料型别，是先进先出（FIFO, First-In-First-Out）的线性表。
在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。
队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。
 具体的详解可以参考这篇文章里的Queue部分栈(STACK), 堆(HEAP), 队列(QUEUE) 是什么？</description>
    </item>
    
    <item>
      <title>【算法笔记】stack的简单实践</title>
      <link>https://limingxie.github.io/algorithm/stack/</link>
      <pubDate>Sun, 13 Feb 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/stack/</guid>
      <description>今天用go语言简单的写了一下stack的方法。
为了以后方便查看，当做笔记整理了一下~~
1.栈(Stack) 维基百科里是这么解释的。
 是计算机科学中的一种抽象资料类型，只允许在有序的线性资料集合的一端（称为堆栈顶端，英语：top）进行加入数据（英语：push）和移除数据（英语：pop）的运算。
因而按照后进先出（LIFO, Last In First Out）的原理运作。</description>
    </item>
    
    <item>
      <title>【算法笔记】时间复杂度(Time complexity) 和 空间复杂度(Space Complexity)</title>
      <link>https://limingxie.github.io/algorithm/time_complexity/</link>
      <pubDate>Wed, 09 Feb 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/time_complexity/</guid>
      <description>我们讨论一些算法的时候，会经常听说时间复杂度和空间复杂度。
之前的工作中一般不会用到算法，加上我又不是计算机专业，对这些不太熟悉。
趁这几天有时间，简单的整理了一下时间复杂度和空间复杂度是什么。
 1.时间复杂度 首先时间复杂度是用大O表示的。
我们看看维基百科是如何整理的。
图片备用地址
看这些眼花缭乱，初学者别看了&amp;hellip;^^;;
其实结合代码看的话，一些常用的时间复杂度还是很好理解的。</description>
    </item>
    
    <item>
      <title>【算法笔记】链表(Linked List)的简单实践</title>
      <link>https://limingxie.github.io/algorithm/linked_list_code/</link>
      <pubDate>Sat, 29 Jan 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/linked_list_code/</guid>
      <description>今天用go语言简单的写了一下单向链表的方法。
为了以后方便查看，当做笔记整理了一下~~
1.链表(Linked List) 维基百科里是这么解释的。
 链表（Linked list）是一种常见的基础数据结构，是一种线性表，
但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。
由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，</description>
    </item>
    
    <item>
      <title>【mysql】常见的4种存储引擎</title>
      <link>https://limingxie.github.io/database/mysql_engine/</link>
      <pubDate>Thu, 27 Jan 2022 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/database/mysql_engine/</guid>
      <description>&lt;p&gt;我们一般用的mysql创建表的时候默认是使用了InnoBD存储引擎。&lt;br&gt;
我本人不是计算机专业，所以刚接触mysql时没注意到它居然有好几种存储引擎。&lt;br&gt;
在不同的场景下，mysql可以选择不同的存储引擎。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>测试代码的基本结构以及(Test Double)的种类</title>
      <link>https://limingxie.github.io/limingxie/test_code/</link>
      <pubDate>Wed, 26 Jan 2022 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/test_code/</guid>
      <description>&lt;p&gt;最近有机会写.net的项目了, 习惯性的研究了如何去写测试代码。&lt;br&gt;
这次查看的资料比以前研究golang测试稍微详细了点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【算法笔记】数组(Array)的模拟实践</title>
      <link>https://limingxie.github.io/algorithm/list_code/</link>
      <pubDate>Tue, 25 Jan 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/list_code/</guid>
      <description>今天用go语言简单的写了一下数组的方法。
为了以后方便查看，当做笔记整理了一下~~
1.数组(Array) 维基百科里是这么解释的。
 简称数组（英语：Array），是由相同类型的元素（element）的集合所组成的数据结构，分配一块连续的内存来存储。
利用元素的索引（index）可以计算出该元素对应的存储地址。
 本想写个通用的方法，但是写着写着感觉需要处理的细节太多了，
本人不才只能简单的写了一下[]int 的数组模式&amp;hellip;^^;;</description>
    </item>
    
    <item>
      <title>普通开发工作多年后的感触</title>
      <link>https://limingxie.github.io/work_sharing/work_note_002/</link>
      <pubDate>Thu, 06 Jan 2022 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/work_note_002/</guid>
      <description>&lt;p&gt;最近刚换了工作，到了新的岗位，准备新的开始。&lt;br&gt;
我到现在刚好工作了14年了。是在淘汰的边缘挣扎的高龄开发(38岁)&amp;hellip;^^;;&lt;br&gt;
在这十多年的工作期间，发现除了“编程”还有一些额外的因素影响我们的职场。&lt;br&gt;
一般的开发人员常年和电脑打交道，会忽略这些因素。&lt;br&gt;
我希望通过这次分享能给初入职场的开发人员一些帮助。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【go笔记】 数组, 切片(slice), 映射(map)简介</title>
      <link>https://limingxie.github.io/go/go_slice/</link>
      <pubDate>Tue, 27 Jul 2021 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/go_slice/</guid>
      <description>我们在日常变成中经常用到数组, 切片(slice), 映射(map)。
这篇文章中简单的介绍一下这3中结构。
1. 数组 数组是我们接触到的最基本的结构，在Go里面的数组有一些比较特别的地方。如下：
 数组是值。将一个数组赋予另一个数组会复制其所有元素。 若将某个数组传入某个函数，它将接收到该数组复制一份而非指针。 数组的大小是其类型的一部分。类型 [10]int 和 [20]int 是不同的。  数组为值的属性很有用，但代价也高，我们也可以传递一个指向该数组的指针。</description>
    </item>
    
    <item>
      <title>【go笔记】new和make的区别</title>
      <link>https://limingxie.github.io/go/go_new_make/</link>
      <pubDate>Tue, 27 Jul 2021 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/go_new_make/</guid>
      <description>new和make都是分配资源的命令，这两个命令很容易混淆。
但是我们只要弄清楚其规则，区分起来不难。
1. new 先看看go语言的官方说明文档是怎么解释的？
new是用来分配内存的内建函数，但与其它语言中的同名函数不同，它不会初始化内存，只会将内存置零。 也就是说，new(T) 会为类型为T的新项分配已置零的内存空间，并返回它的地址，也就是一个类型为 *T的值。 用Go的术语来说，它返回一个指针，该指针指向新分配的，类型为 T 的零值。 简单的说他会创建一个引用类型的地址(栈内存)，不会分配内存空间(堆内存)。</description>
    </item>
    
    <item>
      <title>【Java笔记】简单了解List, ArrayList, LinkedList</title>
      <link>https://limingxie.github.io/java/java_list/</link>
      <pubDate>Fri, 16 Jul 2021 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_list/</guid>
      <description>&lt;p&gt;我们经常会用的几个List结构，那具体在什么样的场景下使用哪个List会更合适呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java笔记】HashMap, HashTable, ConcurrentHashMap, TreeMap, LinkedHashMap</title>
      <link>https://limingxie.github.io/java/java_map/</link>
      <pubDate>Wed, 14 Jul 2021 12:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_map/</guid>
      <description>&lt;p&gt;我们经常会遇到使用Map的情况。而且Map有很多衍生类。&lt;br&gt;
这些类之间有什么区别呢？在何种情况下用何种类呢？&lt;br&gt;
下面我大致整理了什么视情况使用哪种map比较合适，没有单独的去解释每个map的结构和原理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>公司被收购后的经历</title>
      <link>https://limingxie.github.io/work_sharing/work_note_001/</link>
      <pubDate>Fri, 09 Jul 2021 09:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/work_note_001/</guid>
      <description>公司被收购也差不多经历了一年的时间了。
想写写自从公司被收购以后，我这一年内心的变化。
1.从开发主力到小角色 新环境，你以前做什么是不重要的，一切需要听从安排。
因为我们之前主要是用go语言开发，新东家是java。
对我们普遍的评价是业务熟练度还可以，技术能力不行。
(即使公司有很多6~10年经验的开发&amp;hellip;^^;;)
没多少时间适应新的语言，新的架构。
给了一些业务(全渠道)讲解的视频和如何运用架构开发的视频。
一周后直接投入项目了。</description>
    </item>
    
    <item>
      <title>【笔记】RPC和REST的区别</title>
      <link>https://limingxie.github.io/basic/rpc_restful/</link>
      <pubDate>Wed, 16 Jun 2021 20:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/rpc_restful/</guid>
      <description>我们开发的时候会经常听到rpc方式调用方法。或是说调用RESTful api。 那这RPC和REST到底是什么？有什么区别？
RPC（Remote Promote Call） RPC是一种进程间通信方式。允许像调用本地服务一样调用远程服务。
RPC的核心并不在于使用什么协议。RPC的目的是让你在本地调用远程的方法，而对你来说这个调用是透明的，你并不知道这个调用的方法是部署哪里。
通过RPC能解耦服务，这才是使用RPC的真正目的。RPC的原理主要用到了动态代理模式，至于http协议，只是传输协议而已。
简单的实现可以参考spring remoting，复杂的实现可以参考dubbo。</description>
    </item>
    
    <item>
      <title>TCP/IP协议，HTTP协议，HTTPS协议，SOAP协议简介</title>
      <link>https://limingxie.github.io/basic/communication_protocol/</link>
      <pubDate>Wed, 16 Jun 2021 18:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/communication_protocol/</guid>
      <description>我们会听到很多网络通讯协议，如果了解的不到位的话会让你晕头转向的。
今天就按笔记的形式整理了一下我们常见的几种协议。
先看看通讯协议是什么？ 维基百科是这么解释的。
通信协议（Communications Protocol，传输协议） 在电信领域中指的是，在任何物理介质中允许两个或多个在传输系统中的终端之间传播信息的系统标准，也是指计算机通信或网络设备的共同语言。
通信协议定义了通信中的语法学、语义学和同步规则以及可能存在的错误检测与纠正。通信协议在硬件、软件或两者之间皆可实现。
很绕口&amp;hellip;^^;; 如果不是技术相关人员的话，可以这么去理解。</description>
    </item>
    
    <item>
      <title>URI,URL,URN的区别</title>
      <link>https://limingxie.github.io/basic/uri_url_urn/</link>
      <pubDate>Wed, 16 Jun 2021 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/uri_url_urn/</guid>
      <description>我们经常接触到 URI，URL，URN 这些名词。
本以为都是同一个概念，但我发现它们还是有些区别的。
先看看各自的单词意思。
URI（Uniform Resource Identifier ）：统一资源标识符。 URL（Uniform Resource Locator）：统一资源定位符。 URN（Uniform Resource Name）：统一资源名称。 URI 可以进一步划分为定位符（URL），名称（URN）或两者兼备。 URL 和 URN 都是 URI 子集。</description>
    </item>
    
    <item>
      <title>简单整理商品模块的概念和关系</title>
      <link>https://limingxie.github.io/limingxie/product/</link>
      <pubDate>Wed, 07 Apr 2021 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/product/</guid>
      <description>这几天准备构建自营的商品中心。
本以为很简单的已知业务，却没想到会有些抽象的概念和模糊的关系，折磨了我很久。
1.常见的概念 先了解一下下面几个常见的概念。
1.1 SPU(Standard Product Unit) 标准化产品单元。是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。
通俗点讲，属性值、特性相同的商品就可以称为一个SPU。</description>
    </item>
    
    <item>
      <title>【JVM】javac的编译过程</title>
      <link>https://limingxie.github.io/java/java_javac_compiler/</link>
      <pubDate>Mon, 04 Jan 2021 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_javac_compiler/</guid>
      <description>&lt;p&gt;Java 编译是先把xx.java文件编译成xx.class文件。xx.class是个中间状态的字节码(Byte Code)。&lt;br&gt;
类加载器(Class Loader)读取到JVM里后, 再一次解析成机器码(Binary Code)执行。&lt;br&gt;
也就是说Java是需要做两次编译，其中的第一次编译(.java =&amp;gt; .class)是如何执行的呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>程序员减肥记</title>
      <link>https://limingxie.github.io/limingxie/diet/</link>
      <pubDate>Wed, 23 Dec 2020 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/diet/</guid>
      <description>一说起程序员，一般联想到的是熬夜，加班，秃头，小肚子等等&amp;hellip;
我去年感到身体上的异样，不如以前了。
年龄也不小了，加上圆圆的肚子，血脂和血压都不正常，而且还带有脂肪肝。
所以我下定决心减肥了，我本人做一件事会很投入的类型。
查了很多资料，2019年的10月1日启动了减肥项目~
先炫耀一下我的成果&amp;hellip;^^
图片备用地址
我当时到2019年12月底的时候，用3个月的时间成功的减掉了30斤(85公斤减到70公斤)。
后续的2020年1月开始突然新冠疫情爆发，工作上的迷茫，加上几个月的长期出差，只能尽可能的维持体重了。 减肥过的人大多数会感觉到，维持体重其实比减肥还难&amp;hellip;.ㅠㅠ</description>
    </item>
    
    <item>
      <title>【JVM】浅谈java编译和执行过程</title>
      <link>https://limingxie.github.io/java/java_compile_runtime/</link>
      <pubDate>Sun, 20 Dec 2020 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_compile_runtime/</guid>
      <description>&lt;p&gt;上一篇&lt;a href=&#34;https://limingxie.github.io/java/compile_java/&#34;&gt;【JVM】java大致的编译过程&lt;/a&gt;简单的解释了java编译执行过程。&lt;br&gt;
这里稍微再详细点说明其编译和执行过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【JVM】java大致的编译过程</title>
      <link>https://limingxie.github.io/java/compile_java/</link>
      <pubDate>Fri, 20 Nov 2020 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/compile_java/</guid>
      <description>&lt;p&gt;我们先简单的了解一下java编译到执行的过程。&lt;br&gt;
后续我会详细的介绍具体详细的方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言的编译和执行过程</title>
      <link>https://limingxie.github.io/basic/compile_c/</link>
      <pubDate>Fri, 30 Oct 2020 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/compile_c/</guid>
      <description>&lt;p&gt;没有系统的学过C语言，为了了解java编译流程。&lt;br&gt;
先简单的略过了一下C语言的编译过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【JVM】JDK, JRE, JVM简介</title>
      <link>https://limingxie.github.io/java/java_plateform_se_8/</link>
      <pubDate>Thu, 29 Oct 2020 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_plateform_se_8/</guid>
      <description>&lt;p&gt;刚接触到java后，我经常听到的JDK，JRE，JVM这些缩写词。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【JVM】java中的栈内存, 堆内存</title>
      <link>https://limingxie.github.io/java/java_stack_heap/</link>
      <pubDate>Tue, 13 Oct 2020 12:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_stack_heap/</guid>
      <description>&lt;p&gt;上一篇文章简单整理了&lt;a href=&#34;https://limingxie.github.io/basic/stack/&#34;&gt;栈(stack), 堆(heap), 队列(queue)的结构&lt;/a&gt;&lt;br&gt;
这一篇继续整理java中的 占内存，堆内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>栈(stack), 堆(heap), 队列(queue) 是什么？</title>
      <link>https://limingxie.github.io/basic/stack/</link>
      <pubDate>Mon, 12 Oct 2020 23:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/stack/</guid>
      <description>&lt;p&gt;我们平时经常遇到栈(stack), 队列(queue), 堆(heap)这些词语。&lt;br&gt;
像我这样不是计算机专业毕业的程序原来说，为了更好的理解这些内容，&lt;br&gt;
我自己简单的整理了一下栈(stack), 堆(heap)和队列(queue)的概念。&lt;br&gt;
希望有些帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java笔记】反射的简单应用</title>
      <link>https://limingxie.github.io/java/reflect/</link>
      <pubDate>Thu, 30 Jul 2020 23:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/reflect/</guid>
      <description>&lt;p&gt;今天在代码中看到了invoke方法，了解到原来是使用了反射的机制。&lt;br&gt;
以前没怎么用过这种方式，所以简单的了解一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java笔记】this和super简介</title>
      <link>https://limingxie.github.io/java/this_super/</link>
      <pubDate>Sun, 26 Jul 2020 12:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/this_super/</guid>
      <description>&lt;p&gt;本来是确认构造函数的运行方式的。&lt;br&gt;
结果看到继承以及super关键字了&amp;hellip;^^;;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java笔记】类, 抽象类, 接口的简单实验</title>
      <link>https://limingxie.github.io/java/abstract_test/</link>
      <pubDate>Sun, 26 Jul 2020 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/abstract_test/</guid>
      <description>&lt;p&gt;要接触，抽象，继承，多态，封装的java了。&lt;br&gt;
为了加深理解自己做了一个简单的实验。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java笔记】序列化和反序列化</title>
      <link>https://limingxie.github.io/java/serialization/</link>
      <pubDate>Thu, 02 Jul 2020 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/serialization/</guid>
      <description>&lt;p&gt;当做笔记简单了记录了一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【k8s】kubernetes基本的概念</title>
      <link>https://limingxie.github.io/k8s/k8s/</link>
      <pubDate>Wed, 01 Jul 2020 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/k8s/k8s/</guid>
      <description>&lt;p&gt;最近抽时间了解Kubernetes。那些网上和官方的材料都讲得很深，很细。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>递归(recursive)</title>
      <link>https://limingxie.github.io/algorithm/recursive/</link>
      <pubDate>Sat, 03 Aug 2019 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/recursive/</guid>
      <description>&lt;p&gt;最近在研究算法&amp;hellip;^^ 算法中最基本的是排序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法(排序)</title>
      <link>https://limingxie.github.io/algorithm/sort/</link>
      <pubDate>Tue, 09 Jul 2019 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/sort/</guid>
      <description>&lt;p&gt;感觉现在越来越重视算法了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计原则那些事儿</title>
      <link>https://limingxie.github.io/limingxie/solid_1/</link>
      <pubDate>Thu, 06 Jun 2019 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/solid_1/</guid>
      <description>&lt;p&gt;代码架构的设计原则中最普遍的是solid原则。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目:error错误处理</title>
      <link>https://limingxie.github.io/go/err_return/</link>
      <pubDate>Thu, 14 Feb 2019 08:38:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/err_return/</guid>
      <description>&lt;p&gt;上一篇文章我介绍了拆分服务后如何去写测试代码。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/go/my_go_test4/&#34;&gt;Go项目:傻瓜式联合测试&lt;/a&gt;&lt;br&gt;
今天想共享一下，我是如何处理error。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目:傻瓜式联合测试</title>
      <link>https://limingxie.github.io/go/my_go_test4/</link>
      <pubDate>Tue, 12 Feb 2019 08:38:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/my_go_test4/</guid>
      <description>&lt;p&gt;现在微服务很流行，加上我的项目从10个表增加到30+表的业务量。&lt;br&gt;
感觉有些内容不应该在同一个服务里。&lt;br&gt;
于是我做了一个决定: &lt;strong&gt;&lt;code&gt;拆分服务&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>工作中我们常见的误解</title>
      <link>https://limingxie.github.io/work_sharing/work_note/</link>
      <pubDate>Sun, 23 Dec 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/work_note/</guid>
      <description>&lt;p&gt;虽然我不是什么大领导或是一个高管。 &lt;br&gt;
但是看那些尤其是不满5年的员工们对工作的误解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go websocket的简单应用</title>
      <link>https://limingxie.github.io/go/go_socket/</link>
      <pubDate>Thu, 06 Dec 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/go_socket/</guid>
      <description>&lt;p&gt;因为我们是做企业ERP系统，没什么机会接触socket。&lt;br&gt;
这次准备做消息推送才了解到还有socket这种技术&amp;hellip;ㅠㅠ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我们(开发者)的责任</title>
      <link>https://limingxie.github.io/work_sharing/development_responsibility/</link>
      <pubDate>Wed, 14 Nov 2018 05:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/development_responsibility/</guid>
      <description>&lt;p&gt;开发者写错的代码发布到运营，出问题了。&lt;br&gt;
谁来承担责任？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个小小变化的威力</title>
      <link>https://limingxie.github.io/work_sharing/do_change/</link>
      <pubDate>Sun, 11 Nov 2018 05:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/do_change/</guid>
      <description>&lt;p&gt;今天是双11，本想来公司凑凑热闹&amp;hellip;^^&lt;br&gt;
结果主要问题都是在我的服务里，还把登录给整瘫了半个多小时&amp;hellip;ㅠㅠ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>技术Leader需要哪些能力？</title>
      <link>https://limingxie.github.io/work_sharing/share_001/</link>
      <pubDate>Mon, 24 Sep 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/share_001/</guid>
      <description>&lt;p&gt;身为一个高龄开发者(30岁以上应该都属于高领开发者吧？ 这世道&amp;hellip;ㅠㅠ)，&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux 常用命令整理(一)</title>
      <link>https://limingxie.github.io/limingxie/linux_command/</link>
      <pubDate>Sun, 02 Sep 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/linux_command/</guid>
      <description>&lt;p&gt;这么晚了才认识了linux系统。感觉越来越喜欢linux系统了。&lt;br&gt;
废话少说，这几天自己做的笔记，炫耀一下&amp;hellip;.^^&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solid原则简单笔记</title>
      <link>https://limingxie.github.io/limingxie/solid/</link>
      <pubDate>Sat, 01 Sep 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/solid/</guid>
      <description>&lt;p&gt;这些天因为工作上的需求，一套代码部署到不同的环境里。&lt;br&gt;
虽然说是一样的业务，但是在不同的环境里难免会有一些少许不同的业务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git命令 cherry-pick 的使用简介</title>
      <link>https://limingxie.github.io/git/git_cherry_pick/</link>
      <pubDate>Mon, 30 Jul 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/git/git_cherry_pick/</guid>
      <description>&lt;p&gt;上一篇文章介绍了merge和rebase的用法以及原理。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/git/git_merge_rebase/&#34;&gt;git命令merge和rebase的简单应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里简单的介绍一下 cherry-pick 的用法。&lt;br&gt;
什么时候会用到 cherry-pick 命令？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git命令merge和rebase的简单应用</title>
      <link>https://limingxie.github.io/git/git_merge_rebase/</link>
      <pubDate>Sun, 29 Jul 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/git/git_merge_rebase/</guid>
      <description>&lt;p&gt;因为工作的需求，项目分了几个大分支管理了。&lt;br&gt;
不同的环境需要的功能也不一样，在不同的分支里修改。&lt;br&gt;
虽然我不太喜欢这种做法。但是借此机会对merge和rebase, cherry-pick命令研究了一些。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis简单应用</title>
      <link>https://limingxie.github.io/k8s/redis/</link>
      <pubDate>Sun, 01 Jul 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/k8s/redis/</guid>
      <description>&lt;p&gt;这些天因为项目性能上的问题，采用了Redis缓存。&lt;br&gt;
做了一些简单的笔记。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>区块链blockchain基础入门(二)</title>
      <link>https://limingxie.github.io/limingxie/blockchain_2/</link>
      <pubDate>Fri, 22 Jun 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/blockchain_2/</guid>
      <description>&lt;p&gt;上一篇文章简单的介绍了一下区块链blockchain到底是什么。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/limingxie/blockchain_introduction/&#34;&gt;区块链blockchain零基础入门(一)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来继续简单的介绍一下区块链blockchain的结构。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>区块链blockchain零基础入门(一)</title>
      <link>https://limingxie.github.io/limingxie/blockchain_introduction/</link>
      <pubDate>Fri, 22 Jun 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/blockchain_introduction/</guid>
      <description>&lt;p&gt;区块链blockchain这几年比较火爆的词。&lt;br&gt;
不是计算机行业的人如何去理解这么技术呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>公钥，私钥，数字签名，数字证书的相互关系</title>
      <link>https://limingxie.github.io/limingxie/encrpytion_key/</link>
      <pubDate>Thu, 07 Jun 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/encrpytion_key/</guid>
      <description>&lt;p&gt;我们经常听到数字证书，数字签名这些词。&lt;br&gt;
这些证书，签名到底是什么？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目的测试代码3（测试替身Test Double）</title>
      <link>https://limingxie.github.io/go/my_go_test3/</link>
      <pubDate>Sun, 27 May 2018 20:38:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/my_go_test3/</guid>
      <description>&lt;p&gt;上一篇文章介绍了项目中测试代码的写法。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/go/my_go_test1/&#34;&gt;Go项目的测试代码2（项目运用）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里简单的共享一下测试替身。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目的测试代码2（项目运用）</title>
      <link>https://limingxie.github.io/go/my_go_test1/</link>
      <pubDate>Sun, 27 May 2018 20:37:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/my_go_test1/</guid>
      <description>&lt;p&gt;上一篇文章介绍了最基本的测试代码的写法。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/go/my_go_test/&#34;&gt;Go项目的测试代码（基础）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里简单的共享一下我在项目中使用的方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目的测试代码1（基础）</title>
      <link>https://limingxie.github.io/go/my_go_test/</link>
      <pubDate>Sun, 27 May 2018 20:36:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/my_go_test/</guid>
      <description>&lt;p&gt;最近写了测试代码，整理了一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用docker运行mysql</title>
      <link>https://limingxie.github.io/database/docker_mysql/</link>
      <pubDate>Tue, 27 Mar 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/database/docker_mysql/</guid>
      <description>&lt;p&gt;以前开发的时候都是用本地的sqlite开发，但是极少数情况下，sqlite支持的语法发布到服务器上链接mysql会报错。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用hugo搭建个人博客</title>
      <link>https://limingxie.github.io/limingxie/hugo_create/</link>
      <pubDate>Wed, 14 Mar 2018 10:14:08 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/hugo_create/</guid>
      <description>&lt;p&gt;这几天研究了用hugo搭建个人博客。&lt;/p&gt;
&lt;p&gt;简单的整理了一下。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
