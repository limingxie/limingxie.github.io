<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Website of li_mingxie</title>
    <link>https://limingxie.github.io/</link>
    <description>Recent content on Website of li_mingxie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Jun 2021 20:28:49 +0800</lastBuildDate><atom:link href="https://limingxie.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【笔记】RPC和RESTful的区别</title>
      <link>https://limingxie.github.io/basic/rpc_restful-copy/</link>
      <pubDate>Wed, 16 Jun 2021 20:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/rpc_restful-copy/</guid>
      <description>我们开发的时候会经常听到rpc方式调用方法。或是说调用RESTful api。 那这RPC和RESTful到底是什么？有什么区别？
RPC（Remote Promote Call） RPC是一种进程间通信方式。允许像调用本地服务一样调用远程服务。
RPC的核心并不在于使用什么协议。RPC的目的是让你在本地调用远程的方法，而对你来说这个调用是透明的，你并不知道这个调用的方法是部署哪里。
通过RPC能解耦服务，这才是使用RPC的真正目的。RPC的原理主要用到了动态代理模式，至于http协议，只是传输协议而已。
简单的实现可以参考spring remoting，复杂的实现可以参考dubbo。</description>
    </item>
    
    <item>
      <title>TCP/IP协议，HTTP协议，HTTPS协议，SOAP协议简介</title>
      <link>https://limingxie.github.io/basic/communication_protocol/</link>
      <pubDate>Wed, 16 Jun 2021 18:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/communication_protocol/</guid>
      <description>我们会听到很多网络通讯协议，如果了解的不到位的话会让你晕头转向的。
今天就按笔记的形式整理了一下我们常见的几种协议。
先看看通讯协议是什么？ 维基百科是这么解释的。
通信协议（Communications Protocol，传输协议） 在电信领域中指的是，在任何物理介质中允许两个或多个在传输系统中的终端之间传播信息的系统标准，也是指计算机通信或网络设备的共同语言。
通信协议定义了通信中的语法学、语义学和同步规则以及可能存在的错误检测与纠正。通信协议在硬件、软件或两者之间皆可实现。
很绕口&amp;hellip;^^;; 如果不是技术相关人员的话，可以这么去理解。</description>
    </item>
    
    <item>
      <title>URI,URL,URN的区别</title>
      <link>https://limingxie.github.io/basic/uri_url_urn/</link>
      <pubDate>Wed, 16 Jun 2021 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/uri_url_urn/</guid>
      <description>我们经常接触到 URI，URL，URN 这些名词。
本以为都是同一个概念，但我发现它们还是有些区别的。
先看看各自的单词意思。
URI（Uniform Resource Identifier ）：统一资源标识符。 URL（Uniform Resource Locator）：统一资源定位符。 URN（Uniform Resource Name）：统一资源名称。 URI 可以进一步划分为定位符（URL），名称（URN）或两者兼备。 URL 和 URN 都是 URI 子集。</description>
    </item>
    
    <item>
      <title>简单整理商品模块的概念和关系</title>
      <link>https://limingxie.github.io/limingxie/product/</link>
      <pubDate>Wed, 07 Apr 2021 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/product/</guid>
      <description>这几天准备构建自营的商品中心。
本以为很简单的已知业务，却没想到会有些抽象的概念和模糊的关系，折磨了我很久。
1.常见的概念 先了解一下下面几个常见的概念。
1.1 SPU(Standard Product Unit) 标准化产品单元。是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。
通俗点讲，属性值、特性相同的商品就可以称为一个SPU。</description>
    </item>
    
    <item>
      <title>【JVM】javac的编译过程</title>
      <link>https://limingxie.github.io/java/java_javac_compiler/</link>
      <pubDate>Mon, 04 Jan 2021 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_javac_compiler/</guid>
      <description>&lt;p&gt;Java 编译是先把xx.java文件编译成xx.class文件。xx.class是个中间状态的字节码(Byte Code)。&lt;br&gt;
类加载器(Class Loader)读取到JVM里后, 再一次解析成机器码(Binary Code)执行。&lt;br&gt;
也就是说Java是需要做两次编译，其中的第一次编译(.java =&amp;gt; .class)是如何执行的呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>程序员减肥记</title>
      <link>https://limingxie.github.io/limingxie/diet/</link>
      <pubDate>Wed, 23 Dec 2020 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/diet/</guid>
      <description>一说起程序员，一般联想到的是熬夜，加班，秃头，小肚子等等&amp;hellip;
我去年感到身体上的异样，不如以前了。
年龄也不小了，加上圆圆的肚子，血脂和血压都不正常，而且还带有脂肪肝。
所以我下定决心减肥了，我本人做一件事会很投入的类型。
查了很多资料，2019年的10月1日启动了减肥项目~
先炫耀一下我的成果&amp;hellip;^^
图片备用地址
我当时到2019年12月底的时候，用3个月的时间成功的减掉了30斤(85公斤减到70公斤)。
后续的2020年1月开始突然新冠疫情爆发，工作上的迷茫，加上几个月的长期出差，只能尽可能的维持体重了。 减肥过的人大多数会感觉到，维持体重其实比减肥还难&amp;hellip;.ㅠㅠ</description>
    </item>
    
    <item>
      <title>【JVM】浅谈java编译和执行过程</title>
      <link>https://limingxie.github.io/java/java_compile_runtime/</link>
      <pubDate>Sun, 20 Dec 2020 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_compile_runtime/</guid>
      <description>&lt;p&gt;上一篇&lt;a href=&#34;https://limingxie.github.io/java/compile_java/&#34;&gt;【JVM】java大致的编译过程&lt;/a&gt;简单的解释了java编译执行过程。&lt;br&gt;
这里稍微再详细点说明其编译和执行过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【JVM】java大致的编译过程</title>
      <link>https://limingxie.github.io/java/compile_java/</link>
      <pubDate>Fri, 20 Nov 2020 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/compile_java/</guid>
      <description>&lt;p&gt;我们先简单的了解一下java编译到执行的过程。&lt;br&gt;
后续我会详细的介绍具体详细的方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言的编译和执行过程</title>
      <link>https://limingxie.github.io/basic/compile_c/</link>
      <pubDate>Fri, 30 Oct 2020 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/compile_c/</guid>
      <description>&lt;p&gt;没有系统的学过C语言，为了了解java编译流程。&lt;br&gt;
先简单的略过了一下C语言的编译过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【JVM】JDK, JRE, JVM简介</title>
      <link>https://limingxie.github.io/java/java_plateform_se_8/</link>
      <pubDate>Thu, 29 Oct 2020 08:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_plateform_se_8/</guid>
      <description>&lt;p&gt;刚接触到java后，我经常听到的JDK，JRE，JVM这些缩写词。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【JVM】java中的栈内存, 堆内存</title>
      <link>https://limingxie.github.io/java/java_stack_heap/</link>
      <pubDate>Tue, 13 Oct 2020 12:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/java_stack_heap/</guid>
      <description>&lt;p&gt;上一篇文章简单整理了&lt;a href=&#34;https://limingxie.github.io/basic/stack/&#34;&gt;栈(stack), 堆(heap), 队列(queue)的结构&lt;/a&gt;&lt;br&gt;
这一篇继续整理java中的 占内存，堆内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>栈(stack), 堆(heap), 队列(queue) 是什么？</title>
      <link>https://limingxie.github.io/basic/stack/</link>
      <pubDate>Mon, 12 Oct 2020 23:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/basic/stack/</guid>
      <description>&lt;p&gt;我们平时经常遇到栈(stack), 队列(queue), 堆(heap)这些词语。&lt;br&gt;
像我这样不是计算机专业毕业的程序原来说，为了更好的理解这些内容，&lt;br&gt;
我自己简单的整理了一下栈(stack), 堆(heap)和队列(queue)的概念。&lt;br&gt;
希望有些帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java笔记】反射的简单应用</title>
      <link>https://limingxie.github.io/java/reflect/</link>
      <pubDate>Thu, 30 Jul 2020 23:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/reflect/</guid>
      <description>&lt;p&gt;今天在代码中看到了invoke方法，了解到原来是使用了反射的机制。&lt;br&gt;
以前没怎么用过这种方式，所以简单的了解一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java笔记】this和super简介</title>
      <link>https://limingxie.github.io/java/this_super/</link>
      <pubDate>Sun, 26 Jul 2020 12:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/this_super/</guid>
      <description>&lt;p&gt;本来是确认构造函数的运行方式的。&lt;br&gt;
结果看到继承以及super关键字了&amp;hellip;^^;;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java笔记】类, 抽象类, 接口的简单实验</title>
      <link>https://limingxie.github.io/java/abstract_test/</link>
      <pubDate>Sun, 26 Jul 2020 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/abstract_test/</guid>
      <description>&lt;p&gt;要接触，抽象，继承，多态，封装的java了。&lt;br&gt;
为了加深理解自己做了一个简单的实验。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java笔记】序列化和反序列化</title>
      <link>https://limingxie.github.io/java/serialization/</link>
      <pubDate>Thu, 02 Jul 2020 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/java/serialization/</guid>
      <description>&lt;p&gt;当做笔记简单了记录了一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【k8s】kubernetes基本的概念</title>
      <link>https://limingxie.github.io/k8s/k8s/</link>
      <pubDate>Wed, 01 Jul 2020 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/k8s/k8s/</guid>
      <description>&lt;p&gt;最近抽时间了解Kubernetes。那些网上和官方的材料都讲得很深，很细。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>递归(recursive)</title>
      <link>https://limingxie.github.io/algorithm/recursive/</link>
      <pubDate>Sat, 03 Aug 2019 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/recursive/</guid>
      <description>&lt;p&gt;最近在研究算法&amp;hellip;^^ 算法中最基本的是排序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法(排序)</title>
      <link>https://limingxie.github.io/algorithm/sort/</link>
      <pubDate>Tue, 09 Jul 2019 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/sort/</guid>
      <description>&lt;p&gt;感觉现在越来越重视算法了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计原则那些事儿</title>
      <link>https://limingxie.github.io/limingxie/solid_1/</link>
      <pubDate>Thu, 06 Jun 2019 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/solid_1/</guid>
      <description>&lt;p&gt;代码架构的设计原则中最普遍的是solid原则。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目:error错误处理</title>
      <link>https://limingxie.github.io/go/err_return/</link>
      <pubDate>Thu, 14 Feb 2019 08:38:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/err_return/</guid>
      <description>&lt;p&gt;上一篇文章我介绍了拆分服务后如何去写测试代码。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/go/my_go_test4/&#34;&gt;Go项目:傻瓜式联合测试&lt;/a&gt;&lt;br&gt;
今天想共享一下，我是如何处理error。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目:傻瓜式联合测试</title>
      <link>https://limingxie.github.io/go/my_go_test4/</link>
      <pubDate>Tue, 12 Feb 2019 08:38:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/my_go_test4/</guid>
      <description>&lt;p&gt;现在微服务很流行，加上我的项目从10个表增加到30+表的业务量。&lt;br&gt;
感觉有些内容不应该在同一个服务里。&lt;br&gt;
于是我做了一个决定: &lt;strong&gt;&lt;code&gt;拆分服务&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>工作中我们常见的误解</title>
      <link>https://limingxie.github.io/work_sharing/work_note/</link>
      <pubDate>Sun, 23 Dec 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/work_note/</guid>
      <description>&lt;p&gt;虽然我不是什么大领导或是一个高管。 &lt;br&gt;
但是看那些尤其是不满5年的员工们对工作的误解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go websocket的简单应用</title>
      <link>https://limingxie.github.io/go/go_socket/</link>
      <pubDate>Thu, 06 Dec 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/go_socket/</guid>
      <description>&lt;p&gt;因为我们是做企业ERP系统，没什么机会接触socket。&lt;br&gt;
这次准备做消息推送才了解到还有socket这种技术&amp;hellip;ㅠㅠ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我们(开发者)的责任</title>
      <link>https://limingxie.github.io/work_sharing/development_responsibility/</link>
      <pubDate>Wed, 14 Nov 2018 05:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/development_responsibility/</guid>
      <description>&lt;p&gt;开发者写错的代码发布到运营，出问题了。&lt;br&gt;
谁来承担责任？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个小小变化的威力</title>
      <link>https://limingxie.github.io/work_sharing/do_change/</link>
      <pubDate>Sun, 11 Nov 2018 05:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/do_change/</guid>
      <description>&lt;p&gt;今天是双11，本想来公司凑凑热闹&amp;hellip;^^&lt;br&gt;
结果主要问题都是在我的服务里，还把登录给整瘫了半个多小时&amp;hellip;ㅠㅠ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>技术Leader需要哪些能力？</title>
      <link>https://limingxie.github.io/work_sharing/share_001/</link>
      <pubDate>Mon, 24 Sep 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/work_sharing/share_001/</guid>
      <description>&lt;p&gt;身为一个高龄开发者(30岁以上应该都属于高领开发者吧？ 这世道&amp;hellip;ㅠㅠ)，&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux 常用命令整理(一)</title>
      <link>https://limingxie.github.io/limingxie/linux_command/</link>
      <pubDate>Sun, 02 Sep 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/linux_command/</guid>
      <description>&lt;p&gt;这么晚了才认识了linux系统。感觉越来越喜欢linux系统了。&lt;br&gt;
废话少说，这几天自己做的笔记，炫耀一下&amp;hellip;.^^&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solid原则简单笔记</title>
      <link>https://limingxie.github.io/limingxie/solid/</link>
      <pubDate>Sat, 01 Sep 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/solid/</guid>
      <description>&lt;p&gt;这些天因为工作上的需求，一套代码部署到不同的环境里。&lt;br&gt;
虽然说是一样的业务，但是在不同的环境里难免会有一些少许不同的业务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git命令 cherry-pick 的使用简介</title>
      <link>https://limingxie.github.io/git/git_cherry_pick/</link>
      <pubDate>Mon, 30 Jul 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/git/git_cherry_pick/</guid>
      <description>&lt;p&gt;上一篇文章介绍了merge和rebase的用法以及原理。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/git/git_merge_rebase/&#34;&gt;git命令merge和rebase的简单应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里简单的介绍一下 cherry-pick 的用法。&lt;br&gt;
什么时候会用到 cherry-pick 命令？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git命令merge和rebase的简单应用</title>
      <link>https://limingxie.github.io/git/git_merge_rebase/</link>
      <pubDate>Sun, 29 Jul 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/git/git_merge_rebase/</guid>
      <description>&lt;p&gt;因为工作的需求，项目分了几个大分支管理了。&lt;br&gt;
不同的环境需要的功能也不一样，在不同的分支里修改。&lt;br&gt;
虽然我不太喜欢这种做法。但是借此机会对merge和rebase, cherry-pick命令研究了一些。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis简单应用</title>
      <link>https://limingxie.github.io/k8s/redis/</link>
      <pubDate>Sun, 01 Jul 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/k8s/redis/</guid>
      <description>&lt;p&gt;这些天因为项目性能上的问题，采用了Redis缓存。&lt;br&gt;
做了一些简单的笔记。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>区块链blockchain基础入门(二)</title>
      <link>https://limingxie.github.io/limingxie/blockchain_2/</link>
      <pubDate>Fri, 22 Jun 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/blockchain_2/</guid>
      <description>&lt;p&gt;上一篇文章简单的介绍了一下区块链blockchain到底是什么。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/limingxie/blockchain_introduction/&#34;&gt;区块链blockchain零基础入门(一)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来继续简单的介绍一下区块链blockchain的结构。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>区块链blockchain零基础入门(一)</title>
      <link>https://limingxie.github.io/limingxie/blockchain_introduction/</link>
      <pubDate>Fri, 22 Jun 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/blockchain_introduction/</guid>
      <description>&lt;p&gt;区块链blockchain这几年比较火爆的词。&lt;br&gt;
不是计算机行业的人如何去理解这么技术呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>公钥，私钥，数字签名，数字证书的相互关系</title>
      <link>https://limingxie.github.io/limingxie/encrpytion_key/</link>
      <pubDate>Thu, 07 Jun 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/encrpytion_key/</guid>
      <description>&lt;p&gt;我们经常听到数字证书，数字签名这些词。&lt;br&gt;
这些证书，签名到底是什么？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目的测试代码3（测试替身Test Double）</title>
      <link>https://limingxie.github.io/go/my_go_test3/</link>
      <pubDate>Sun, 27 May 2018 20:38:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/my_go_test3/</guid>
      <description>&lt;p&gt;上一篇文章介绍了项目中测试代码的写法。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/go/my_go_test1/&#34;&gt;Go项目的测试代码2（项目运用）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里简单的共享一下测试替身。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目的测试代码2（项目运用）</title>
      <link>https://limingxie.github.io/go/my_go_test1/</link>
      <pubDate>Sun, 27 May 2018 20:37:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/my_go_test1/</guid>
      <description>&lt;p&gt;上一篇文章介绍了最基本的测试代码的写法。&lt;br&gt;
&lt;a href=&#34;https://limingxie.github.io/go/my_go_test/&#34;&gt;Go项目的测试代码（基础）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里简单的共享一下我在项目中使用的方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go项目的测试代码1（基础）</title>
      <link>https://limingxie.github.io/go/my_go_test/</link>
      <pubDate>Sun, 27 May 2018 20:36:02 +0800</pubDate>
      
      <guid>https://limingxie.github.io/go/my_go_test/</guid>
      <description>&lt;p&gt;最近写了测试代码，整理了一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用docker运行mysql</title>
      <link>https://limingxie.github.io/k8s/docker_mysql/</link>
      <pubDate>Tue, 27 Mar 2018 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/k8s/docker_mysql/</guid>
      <description>&lt;p&gt;以前开发的时候都是用本地的sqlite开发，但是极少数情况下，sqlite支持的语法发布到服务器上链接mysql会报错。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用hugo搭建个人博客</title>
      <link>https://limingxie.github.io/limingxie/hugo_create/</link>
      <pubDate>Wed, 14 Mar 2018 10:14:08 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/hugo_create/</guid>
      <description>&lt;p&gt;这几天研究了用hugo搭建个人博客。&lt;/p&gt;
&lt;p&gt;简单的整理了一下。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
