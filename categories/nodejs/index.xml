<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Website of li_mingxie</title>
    <link>https://limingxie.github.io/categories/nodejs/</link>
    <description>Recent content in Nodejs on Website of li_mingxie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 29 May 2022 09:05:49 +0800</lastBuildDate><atom:link href="https://limingxie.github.io/categories/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【Nodejs笔记】nodejs入门简介_nvm</title>
      <link>https://limingxie.github.io/js/nodejs/nodejs_08/</link>
      <pubDate>Sun, 29 May 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/js/nodejs/nodejs_08/</guid>
      <description>nvm可以自由的管理nodejs的版本的切换，用起来非常方便。
这篇整理了nvm安装和常用命令。
1.安装 最新的安装方法可以参考这里。 https://github.com/nvm-sh/nvm
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash 建议把脚本下载到本地自己运行安装。</description>
    </item>
    
    <item>
      <title>【Nodejs笔记】nodejs入门简介_express</title>
      <link>https://limingxie.github.io/js/nodejs/nodejs_07/</link>
      <pubDate>Sat, 28 May 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/js/nodejs/nodejs_07/</guid>
      <description>这篇使用Express框架搭建一个简单的web服务器。
1.初始化和安装Express框架 npm init -y npm install express --save npm install nodemon --save-dev //开发模式有变化自动编译 npm install body-parser --save //读取请求body值 npm install cors --save 2.</description>
    </item>
    
    <item>
      <title>【Nodejs笔记】nodejs入门简介_Promise(3)</title>
      <link>https://limingxie.github.io/js/vue/vue_01/</link>
      <pubDate>Sat, 28 May 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/js/vue/vue_01/</guid>
      <description>async  async函数的返回值是promise对象。 promise对象的结果由async函数执行的返回值决定。  await  await右侧的表达式一般为promise对象。也可以是其他值。 await返回的是promise对象的成功的值。如果不是Promise对象直接是返回值。 await必须写在async函数中。但是async可以没有await。 await的promise失败了，就会抛出异常，需要用try catch捕获。  简单实例 //普通读取文件 fs.</description>
    </item>
    
    <item>
      <title>【Nodejs笔记】nodejs入门简介_Promise(3)</title>
      <link>https://limingxie.github.io/js/nodejs/nodejs_06/</link>
      <pubDate>Fri, 27 May 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/js/nodejs/nodejs_06/</guid>
      <description>async  async函数的返回值是promise对象。 promise对象的结果由async函数执行的返回值决定。  await  await右侧的表达式一般为promise对象。也可以是其他值。 await返回的是promise对象的成功的值。如果不是Promise对象直接是返回值。 await必须写在async函数中。但是async可以没有await。 await的promise失败了，就会抛出异常，需要用try catch捕获。  简单实例 //普通读取文件 fs.</description>
    </item>
    
    <item>
      <title>【Nodejs笔记】nodejs入门简介_Promise(2)</title>
      <link>https://limingxie.github.io/js/nodejs/nodejs_05/</link>
      <pubDate>Thu, 26 May 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/js/nodejs/nodejs_05/</guid>
      <description>跟着教程写了一遍Promise的自建方法。
class Promise { constructor(executor) { //声明Prmise的两个属性  this.PromiseState = &amp;#39;pending&amp;#39;; this.</description>
    </item>
    
    <item>
      <title>【Nodejs笔记】nodejs入门简介_Promise(1)</title>
      <link>https://limingxie.github.io/js/nodejs/nodejs_04/</link>
      <pubDate>Wed, 25 May 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/js/nodejs/nodejs_04/</guid>
      <description>1.Promiose 是什么？ Promise是JS中进行异步编程的解决方案。可以有效的避免了之前版本的回调地狱方式。
Promise是一个构造函数。
Promise对象用来封装一个异步操作并可以获取成功或失败的结果值。
简单的看看Promise和传统的回调方式：
/* 编写一个抽奖程序，抽奖的过程是： 取一个随机数1~100，1~30为中奖，31~100为没中奖。 */ function rand(m, n) { return Math.</description>
    </item>
    
    <item>
      <title>【Nodejs笔记】nodejs入门简介_文件读取和写入</title>
      <link>https://limingxie.github.io/js/nodejs/nodejs_03/</link>
      <pubDate>Tue, 24 May 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/js/nodejs/nodejs_03/</guid>
      <description>这篇简单的整理了nodejs的buffer, 文件读取和写入, 以及流方式读取和写入。
{ console.log(&amp;#39;----------Buffer----------&amp;#39;); /* Buffer(缓冲区) 8bit=1字节byte */ let str = &amp;#39;hello 小明&amp;#39; let buf = Buffer.</description>
    </item>
    
    <item>
      <title>【Nodejs笔记】nodejs入门简介_模块化</title>
      <link>https://limingxie.github.io/js/nodejs/nodejs_02/</link>
      <pubDate>Mon, 23 May 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/js/nodejs/nodejs_02/</guid>
      <description>这篇简单的整理了nodejs的模块化的内容。
 每一个js文件是一个模块。每个js文件其实是被一个函数包裹着 引用文件需要require 提供接口需要用export  具体的内容直接看实例:
md.js
module.exports = { x: 10, fn: () =&amp;gt; { console.</description>
    </item>
    
    <item>
      <title>【Nodejs笔记】nodejs入门简介</title>
      <link>https://limingxie.github.io/js/nodejs/nodejs_01/</link>
      <pubDate>Sun, 22 May 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/js/nodejs/nodejs_01/</guid>
      <description>公司项目用到了vue和nodejs&amp;hellip;ㅠㅠ
又要学新的开发语言了&amp;hellip;^^;;
今天看着资料简单的整理了概念，然后搭建了一个http服务。
如何去安装和配置开发环境，百度上一大把，这里就不介绍了。
1.nodejs 先看看nodejs在维基百科里是怎么解释的。
 Node.js 是能够在服务器端运行 JavaScript 的开放源代码、跨平台执行环境。</description>
    </item>
    
  </channel>
</rss>
