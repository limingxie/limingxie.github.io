<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linked List on Website of li_mingxie</title>
    <link>https://limingxie.github.io/tags/linked-list/</link>
    <description>Recent content in Linked List on Website of li_mingxie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Feb 2022 07:28:49 +0800</lastBuildDate><atom:link href="https://limingxie.github.io/tags/linked-list/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【算法笔记】散列表(哈希表 Hash table)的简单实践</title>
      <link>https://limingxie.github.io/algorithm/hash_table/</link>
      <pubDate>Wed, 16 Feb 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/hash_table/</guid>
      <description>今天用go语言简单的写了一下散列表(哈希表 Hash table)的方法。
为了以后方便查看，当做笔记整理了一下~~
1.散列表(Hash table) 我们先看看维基百科里是怎么解释的。
 根据键（Key）而直接访问在内存储存位置的数据结构。也就是说，它通过计算出一个键值的函数，将所需查询的数据映射到表中一个位置来让人访问，这加快了查找速度。
这个映射函数称做散列函数，存放记录的数组称做散列表。</description>
    </item>
    
    <item>
      <title>【算法笔记】stack的简单实践</title>
      <link>https://limingxie.github.io/algorithm/stack/</link>
      <pubDate>Sun, 13 Feb 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/stack/</guid>
      <description>今天用go语言简单的写了一下stack的方法。
为了以后方便查看，当做笔记整理了一下~~
1.栈(Stack) 维基百科里是这么解释的。
 是计算机科学中的一种抽象资料类型，只允许在有序的线性资料集合的一端（称为堆栈顶端，英语：top）进行加入数据（英语：push）和移除数据（英语：pop）的运算。
因而按照后进先出（LIFO, Last In First Out）的原理运作。</description>
    </item>
    
    <item>
      <title>【算法笔记】链表(Linked List)的简单实践</title>
      <link>https://limingxie.github.io/algorithm/linked_list_code/</link>
      <pubDate>Sat, 29 Jan 2022 07:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/algorithm/linked_list_code/</guid>
      <description>今天用go语言简单的写了一下单向链表的方法。
为了以后方便查看，当做笔记整理了一下~~
1.链表(Linked List) 维基百科里是这么解释的。
 链表（Linked list）是一种常见的基础数据结构，是一种线性表，
但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。
由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，</description>
    </item>
    
  </channel>
</rss>
