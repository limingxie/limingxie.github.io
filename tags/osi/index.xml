<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OSI on Website of li_mingxie</title>
    <link>https://limingxie.github.io/tags/osi/</link>
    <description>Recent content in OSI on Website of li_mingxie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 29 Apr 2022 18:05:49 +0800</lastBuildDate><atom:link href="https://limingxie.github.io/tags/osi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【网络协议笔记】第五层:应用层(Application)HTTP协议简介(3)</title>
      <link>https://limingxie.github.io/network/5_application_http_03/</link>
      <pubDate>Fri, 29 Apr 2022 18:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/5_application_http_03/</guid>
      <description>这一篇整理了应用层的 HTTP协议的ABNF格式。
1.ABNF ABNF（Augmented BNF），是BNF（Backus-Naur Form，译：巴克斯-瑙尔范式）的修改/增强版。
在RFC_5234中表明ABNF用作internet中通信协议的定义语言。
ABNF是最严谨的HTTP报文格式描述形式，脱离ABNF谈论HTTP报文格式，往往都是不严谨的。
关于HTTP报文格式的定义：
旧版：RFC_2616_4.HTTP Message</description>
    </item>
    
    <item>
      <title>【网络协议笔记】第五层:应用层(Application)HTTP协议简介(2)</title>
      <link>https://limingxie.github.io/network/5_application_http_02/</link>
      <pubDate>Thu, 28 Apr 2022 18:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/5_application_http_02/</guid>
      <description>这一篇整理了应用层的 HTTP协议的概念，以及大致的结构。
1.HTTP HTTP（Hyper Text Transfer Protocol），
超文本传输协议。是互联网中应用最广泛的应用层协议之一。
设计HTTP最初的目的是：
提供一种发布和接收HTML页面的方法（HTTP最初就是用来传输HTML的），由URI来标识具体的资源。</description>
    </item>
    
    <item>
      <title>【网络协议笔记】第五层:应用层(Application)简介(1)</title>
      <link>https://limingxie.github.io/network/5_application_01/</link>
      <pubDate>Wed, 27 Apr 2022 18:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/5_application_01/</guid>
      <description>这一篇整理了应用层的 域名，DNS, DHCP。
1.应用层常见协议  超文本传输协议：HTTP、HTTPS 文件传输：FTP 电子邮件：SMTP、POP3、IMAP 动态主机配置：DHCP 域名系统：DNS  1.</description>
    </item>
    
    <item>
      <title>【网络协议笔记】第四层:传输层(Transport)TCP协议简介(3)</title>
      <link>https://limingxie.github.io/network/4_-transport_tcp_03/</link>
      <pubDate>Tue, 26 Apr 2022 09:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/4_-transport_tcp_03/</guid>
      <description>TCP有以下几个知识点。这一篇整理建立连接部分，包括三次握手和4次挥手。
1.可靠传输(失败重传，保证不丢包) 2.流量控制(点对点，端对端；是通过控制接收窗口大小来控制的) 3.拥塞控制(一起维护网络环境，1.慢开始，2.用舌避免，3.快速重传，4快速回复) 4.建立连接(三次握手,四次挥手) 1.TCP（Transmission Control Protocol）：传输控制协议 这一篇我们看看TCP的【三次握手】和【四次挥手】。
在看握手之前，需要对序号和确认号要有个清晰的概念才行。</description>
    </item>
    
    <item>
      <title>【网络协议笔记】第四层:传输层(Transport)TCP协议简介(2)</title>
      <link>https://limingxie.github.io/network/4_-transport_tcp_02/</link>
      <pubDate>Mon, 25 Apr 2022 06:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/4_-transport_tcp_02/</guid>
      <description>TCP有以下几个知识点。这一篇整理【2.流量控制】和【3.拥塞控制】
1.可靠传输(失败重传，保证不丢包) 2.流量控制(点对点，端对端；是通过控制接收窗口大小来控制的) 3.拥塞控制(一起维护网络环境，1.慢开始，2.用舌避免，3.快速重传，4快速回复) 4.建立连接(三次握手,四次挥手) 1.流量控制 如果接收方的缓存区满了，发送方还在疯狂发送数据，
接收方只能把收到的数据包丢掉，大量的丢包会极大浪费网络资源，所以要进行流量控制。
流量控制：让发送方的发送速率不要太快，让接收方来得及接收处理。 原理：通过确认报文中窗口字段来控制发送方的发送速率；</description>
    </item>
    
    <item>
      <title>【网络协议笔记】第四层:传输层(Transport)TCP协议简介(1)</title>
      <link>https://limingxie.github.io/network/4_-transport_tcp_01/</link>
      <pubDate>Sun, 24 Apr 2022 21:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/4_-transport_tcp_01/</guid>
      <description>TCP有以下几个知识点。这一篇整理【TCP结构】和【1.可靠传输】
1.可靠传输(失败重传，保证不丢包) 2.流量控制(点对点，端对端；是通过控制接收窗口大小来控制的) 3.拥塞控制(一起维护网络环境，1.慢开始，2.用舌避免，3.快速重传，4快速回复) 4.建立连接(三次握手,四次挥手) 1.TCP（Transmission Control Protocol）：传输控制协议 图片备用地址
图片备用地址</description>
    </item>
    
    <item>
      <title>【网络协议笔记】第四层:传输层(Transport)以及UPD协议简介</title>
      <link>https://limingxie.github.io/network/4_-transport__udp/</link>
      <pubDate>Sat, 23 Apr 2022 21:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/4_-transport__udp/</guid>
      <description>1.传输层（Transport） TCP和UDP的区别： 图片备用地址
1.1 连接性 TCP是面向连接，也就是说TCP传输必须先要建立连接才能通信，建立连接就是我们熟知的“三次握手”。
TCP在数据传输完毕后需要断开连接，因为服务器会有端口不断的监听本次连接的状态，如果不断开就会一直占用资源，断开连接需要“四次挥手”。
UDP是无连接，通信时不需要建立连接，发送方直接发送数据，不关心接收方的接收状态。
1.2 可靠性 TCP：可靠传输，不丢包。只要发现丢包就会重新发送，会保证数据是准确的。</description>
    </item>
    
    <item>
      <title>【网络协议笔记】第三层:网络层(Network)简介</title>
      <link>https://limingxie.github.io/network/3_-network-copy/</link>
      <pubDate>Fri, 22 Apr 2022 19:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/3_-network-copy/</guid>
      <description>网络层数据包（IP数据包：Packet）由首部、数据2部分组成。
数据: 由传输层传递下来的数据段(Segment)。
下图是网络层的数据包结构：
图片备用地址
下图是使用Wireshark抓包的信息:
图片备用地址
1.版本（Version） 占4位（0b0100：IPv4，0b0110：IPv6）。
2.首部长度（Header Length） 占4位，标识该IP头部有多少个32bit字（4字节），因为4位最大能表示15，所以IP头部最长是60字节。</description>
    </item>
    
    <item>
      <title>【网络协议笔记】第二层:数据链路层(Data Link)简介</title>
      <link>https://limingxie.github.io/network/2_data_link/</link>
      <pubDate>Thu, 21 Apr 2022 19:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/2_data_link/</guid>
      <description>数据链路层(Data Link)是网络协议中的第二层。
链路: 从1个节点到相邻节点的一段物理线路(有线或无线)，中间没有其他交换节点。
数据链路: 在一条链路上传输数据时，需要有对应的通信协议来控制数据的传输。
不同类型的数据链路，所用的通信协议可能是不同的。
广播信道: CSMA/CD协议（比如同轴电缆、集线器等组成的网络）
点对点信道: PPP协议（比如2个路由器之间的信道）</description>
    </item>
    
    <item>
      <title>【网络协议笔记】第一层:物理层(Physical)简介</title>
      <link>https://limingxie.github.io/network/1_physical-copy/</link>
      <pubDate>Wed, 20 Apr 2022 19:05:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/1_physical-copy/</guid>
      <description>物理层定义了接口标准、线缆标准、传输速率、传输方式等（比如路由器定义的接口是做什么的、水晶头怎么排布、光缆线的作用等）。
1.信号类型 图片备用地址
1.1 模拟信号（Analog Signal） 连续的信号，适合长距离传输
抗干扰能力差，受到干扰时波形变形很难纠正
1.2 数字信号（Digital Signal） 离散的信号，不适合长距离传输</description>
    </item>
    
    <item>
      <title>【网络协议笔记】浅谈OSI网络七层协议</title>
      <link>https://limingxie.github.io/network/osi/</link>
      <pubDate>Fri, 15 Apr 2022 22:28:49 +0800</pubDate>
      
      <guid>https://limingxie.github.io/network/osi/</guid>
      <description>开放式系统互联模型（英语：Open System Interconnection Model，缩写：OSI；简称为OSI模型）是一种概念模型。
从分布式应用程序数据的最高层表示到跨通信介质传输数据的物理实现。
每个中间层为其上一层提供功能，其自身功能则由其下一层提供。功能的类别通过标准的通信协议在软件中实现。
OSI模型分为七个层次。它们由低到高分别是物理层(PH)、数据链路层(DL)、网络层(N)、传输层(T)、会话层(S)、表示层(P)、应用层(A)。
7层模型是偏理论的模型。实际落地的时，大部分都准守4层的TCP/IP协议族。 因物理层和数据链路层比较重要，所以研究和学习时，有可能分5层结构。 如下图: 图片备用地址</description>
    </item>
    
  </channel>
</rss>
